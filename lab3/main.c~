#include <msp430.h>
#include <libTimer.h>
#include "lcdutils.h"
#include "lcddraw.h"



#define LED BIT6
#define SW1 1
#define SW2 2
#define SW3 4
#define SW4 8
#define SWITCHES 15



// Notes for the jingle

#define NOTE_C 261.63
#define NOTE_E 329.63
#define NOTE_G 392.00



// Global variables

int switches = 0;
short redrawScreen = 1;
unsigned char ballColorToggle = 0;
unsigned int trunkColor = COLOR_BROWN;



// Ball positions and movement

short ball1Pos[2] = {1,10}, ball2Pos[2] = {2,30};
short ball1Control[2] = {2,10}, ball2Control[2] = {3,30};
short velocity = 2;



// Jingle state
unsigned char noteIndex = 0;
const float notes[] = {NOTE_C, NOTE_E, NOTE_G};
const int totalNotes = 3;
unsigned char playingJingle = 0;
unsigned char noteTimer = 0;


void triangleUp(int startX, int startY, int size, unsigned int color) {
  for (int y = 0; y < size; y++) {
    int halfWidth = y;
    for (int x = startX - halfWidth; x <= startX + halfWidth; x++) {
      fillRectangle(x, startY - y, 1, 1, color);
    }
  }
}

void draw_star(int centerX, int centerY, unsigned int color) {
  fillRectangle(centerX-2, centerY, 5, 1, color);
  fillRectangle(centerX, centerY-2, 1, 5, color);
  fillRectangle(centerX-1, centerY-1, 3, 3, color);
}

void draw_ball(int col, int row, unsigned short color) {

  fillRectangle(col-1, row-1, 3, 3, color);

}

void draw_tree() {

  // Draw trunk

  int trunkWidth = 20;

  int trunkHeight = 30;

  int trunkX = screenWidth/2 - trunkWidth/2;

  int trunkY = screenHeight - trunkHeight;

  fillRectangle(trunkX, trunkY, trunkWidth, trunkHeight, trunkColor);



  // Draw triangle (green)

  triangleUp(screenWidth/2, trunkY, 60, COLOR_GREEN);



  // Draw star and text if SW1 is pressed

  if(switches & SW1) {

    draw_star(screenWidth/2, trunkY - 65, COLOR_YELLOW);

    drawString5x7(screenWidth/2 - 30, trunkY - 80, "MERRY XMAS", COLOR_WHITE);

  }



  // Draw "Happy Holidays" if SW2 is pressed

  if(switches & SW2) {

    drawString5x7(screenWidth/2 - 40, 20, "HAPPY HOLIDAYS", COLOR_WHITE);

  }

}

void update_ball_positions() {

  // Update first ball

  ball1Control[0] += velocity;

  if(ball1Control[0] <= screenWidth/2 - 55 || ball1Control[0] >= screenWidth/2 + 55)

    velocity = -velocity;



  // Update second ball with offset

  ball2Control[0] = ball1Control[0] + 20;

}

void draw_balls() {

  unsigned int ballColor = ballColorToggle ? COLOR_WHITE : COLOR_GREEN;



  // Erase old positions

  draw_ball(ball1Pos[0], ball1Pos[1], COLOR_BLACK);

  draw_ball(ball2Pos[0], ball2Pos[1], COLOR_BLACK);



  // Update positions

  ball1Pos[0] = ball1Control[0];

  ball2Pos[0] = ball2Control[0];



  // Draw new positions

  draw_ball(ball1Pos[0], ball1Pos[1], ballColor);

  draw_ball(ball2Pos[0], ball2Pos[1], ballColor);

}

void buzzer_init() {

  timerAUpmode();

  P2SEL2 &= ~(BIT6 | BIT7);

  P2SEL &= ~BIT7;

  P2SEL |= BIT6;

  P2DIR = BIT6;

}

static char switch_update_interrupt_sense() {

  char p2val = P2IN;

  P2IES |= (p2val & SWITCHES);

  P2IES &= (p2val | ~SWITCHES);

  return p2val;

}

void switch_init() {

  P2REN |= SWITCHES;

  P2IE |= SWITCHES;

  P2OUT |= SWITCHES;

  P2DIR &= ~SWITCHES;

  switch_update_interrupt_sense();

}

void switch_interrupt_handler() {

  char p2val = switch_update_interrupt_sense();

  switches = ~p2val & SWITCHES;

}

void wdt_c_handler() {

  static int secCount = 0;



  secCount++;

  if (secCount >= 25) {  // 10/sec

    secCount = 0;



    // Toggle ball colors every second

    static int colorCount = 0;

    colorCount++;

    if(colorCount >= 10) {

      colorCount = 0;

      ballColorToggle = !ballColorToggle;

    }



    // Update ball positions

    update_ball_positions();



    // Handle jingle for SW2

    if(switches & SW2) {

      if(!playingJingle) {

	playingJingle = 1;

	noteIndex = 0;

	noteTimer = 0;

      }

    }
    if(playingJingle) {

      noteTimer++;

      if(noteTimer >= 20) {  // 2 seconds between notes

	noteTimer = 0;

	if(noteIndex < totalNotes) {

	  int period = 2000000 / notes[noteIndex];

	  buzzer_set_period(period);

	  noteIndex++;

	} else {

	  playingJingle = 0;

	  buzzer_set_period(0);

	}

      }

    }



    // Update trunk color if SW3 is pressed

    if(switches & SW3) {

      trunkColor = COLOR_RED;  // Or any other color change logic

    } else {

      trunkColor = COLOR_BROWN;

    }



    // Set redraw flag only when needed

    redrawScreen = 1;

  }

}

void main() {

  P1DIR |= LED;

  P1OUT |= LED;



  configureClocks();

  lcd_init();

  switch_init();

  buzzer_init();



  enableWDTInterrupts();

  or_sr(0x8);



  clearScreen(COLOR_BLACK);



  while(1) {

    if(redrawScreen) {

      redrawScreen = 0;

      draw_tree();

      draw_balls();

    }

    P1OUT &= ~LED;

    or_sr(0x10);

    P1OUT |= LED;

  }

}

void __interrupt_vec(PORT2_VECTOR) Port_2() {

  if(P2IFG & SWITCHES) {

    P2IFG &= ~SWITCHES;

    switch_interrupt_handler();

  }

}
